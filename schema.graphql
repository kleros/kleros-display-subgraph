enum Period {
  EVIDENCE
  COMMIT
  VOTE
  APPEAL
  EXECUTED
}

type ArbitrableHistory @entity {
  id: Bytes!
  metaEvidence: String!
  disputes: [Dispute!]! @derivedFrom(field: "arbitrableHistory")
}

type Dispute @entity {
  id: ID!
  disputeIDNumber: BigInt!
  arbitrated: Bytes!
  metaEvidenceId: BigInt!
  arbitrableHistory: ArbitrableHistory
  ruling: BigInt!
  ruled: Boolean!
  period: Period!
  createdAtBlock: BigInt!
  court: Court!
  periodDeadline: BigInt!
  periodNotificationIndex: BigInt!
  lastPeriodChangeTs: BigInt!
  lastPeriodChangeBlock: BigInt!
  nbChoices: BigInt!
  nbRounds: BigInt!
  currentRound: Round!
  rounds: [Round!]! @derivedFrom(field: "dispute")
  evidenceGroup: EvidenceGroup! @derivedFrom(field: "dispute")
}

type Round @entity {
  id: Bytes!
  round: BigInt!
  isCurrentRound: Boolean!
  dispute: Dispute!
  jurors: [Bytes!]!
}

type UserDisputeInfo @entity {
  id: String!
  dispute: Dispute!
  juror: String!
}

type UserRoundInfo @entity {
  id: String!
  dispute: Dispute!
  drawNotificationIndex: BigInt!
  juror: String!
  round: Round!
}

type Counter @entity {
  id: String!
  counter: BigInt!
}

type Court @entity {
  id: String!
  timesPerPeriod: [BigInt!]
  hiddenVotes: Boolean
  policy: String
  summary: String
  metadata: CourtMetadata
}

type CourtMetadata @entity{
  id: ID!
  name: String
  description: String
  requiredSkills: String
}

type Draw @entity {
  "disputeID-appeal-voteID"
  id: ID!
  "Lucky juror who got drawn"
  address: Bytes!
  "Number of the round"
  appeal: BigInt!
  "Number of the dispute"
  disputeID: BigInt!
  "Number of the vote"
  voteID: BigInt!
}

type TokenAndETHShift @entity {
  "disputeId-address-(discriminator)"
  id: ID!
  ETHAmount: BigInt!
  address: Bytes!
  disputeID: BigInt!
  tokenAmount: BigInt!
}

type EvidenceGroup @entity {
  id: Bytes!
  dispute: Dispute
  length: BigInt!
  evidence: [Evidence!]! @derivedFrom(field: "group")
}

type Evidence @entity(immutable: true) {
  id: Bytes!
  group: EvidenceGroup!
  creationTime: BigInt!
  URI: String!
  sender: Bytes!
}

type StakeSet @entity {
  "event.transaction.hash.toHex() + - + event.logIndex.toString()"
  id: ID!
  address: Bytes! # address
  subcourtID: BigInt! # uint256
  stake: BigInt! # uint128
  newTotalStake: BigInt! # uint256
  blocknumber: BigInt!
  timestamp: BigInt!
  logIndex: BigInt!
}